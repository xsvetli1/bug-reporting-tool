import IIssueController from '../IIssueController';
import { IssueInfo } from '../models/IssueInfo';
import IssueFormatter from '../utils/IssueFormatter';
import { GithubProps } from './GithubProps';

type ReleaseInfo = { id: number; htmlUrl: string };

/**
 * Implementation of IIssueController for Github.
 */
class GithubController implements IIssueController {
    static releaseTag = 'bug-reporting-tool-screenshots';

    props: GithubProps;
    releasesApiUrl: string;

    constructor(props: GithubProps) {
        this.props = props;
        this.releasesApiUrl = `https://api.github.com/repos/${props.owner}/${props.repository}/releases`;
    }

    async newIssue(issueInfo: IssueInfo): Promise<boolean> {
        // this.uploadAllScreenshots(issueInfo); // Screenshots can not be uploaded to Github from browser so far
        return await this.createIssue(issueInfo);
    }

    async createIssue(issueInfo: IssueInfo): Promise<boolean> {
        const response = await fetch(
            `https://api.github.com/repos/${this.props.owner}/${this.props.repository}/issues`,
            {
                method: 'POST',
                headers: {
                    Accept: 'application/vnd.github+json',
                    Authorization: `Bearer ${this.props.authToken}`
                },
                body: JSON.stringify({
                    owner: this.props.owner,
                    repo: this.props.repository,
                    title: IssueFormatter.issueTitle(issueInfo),
                    body: IssueFormatter.issueDescription(issueInfo, [], null),
                    assignees: [],
                    labels: [issueInfo.type.getLabel()]
                })
            }
        );

        return response.ok;
    }

    async obtainReleaseInfo(): Promise<ReleaseInfo | null> {
        const response = await fetch(this.releasesApiUrl, {
            method: 'GET',
            headers: {
                Authorization: `Bearer ${this.props.authToken}`,
                'Content-Type': 'application/json'
            }
        });

        const releases = await response.json();
        const screenshotRelease = releases.find(
            (release: { tag_name: string }) => release.tag_name == GithubController.releaseTag
        );

        if (screenshotRelease) {
            return {
                id: screenshotRelease.id,
                htmlUrl: screenshotRelease.html_url
            };
        }

        return null;
    }

    async createRelease(): Promise<ReleaseInfo> {
        const response = await fetch(this.releasesApiUrl, {
            method: 'POST',
            headers: {
                Authorization: `Bearer ${this.props.authToken}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                owner: this.props.owner,
                repo: this.props.repository,
                tag_name: GithubController.releaseTag,
                name: 'BugReportingTool screenshots',
                body:
                    '<b>Do not delete this release!</b><br />' +
                    'This release is used as a storage for all uploaded screenshots generated by BugReportingTool. ' +
                    'It is saved as draft, so nobody without appropriate access will ever see it.<br /><br />' +
                    'For more information, about why does this release exist, visit: ' +
                    'https://github.com/xsvetli1/bug-reporting-tool/',
                draft: true
            })
        });

        const release = await response.json();
        return { id: release.id, htmlUrl: release.html_url };
    }

    /**
     * NOT WORKING!
     *
     * Asset upload gives me CORS error, which means I can not make cross-origin requests to upload screenshots.
     * The reason is that Github API endpoint '/assets' does not support cross-origin requests. Because of that,
     * I can not upload screenshot as release asset.
     *
     * Release assets were chosen as workaround, because Github API does not provide endpoint to upload files,
     * which could be used as an issue attachment.
     *
     * Other not-investigated workaround is to commit and push screenshots directly to repository. However,
     * it does not seem as most appropriate solution, as developers would not want to have their repository
     * content changed with every issue created.
     *
     * Error message:
     * Access to fetch at 'https://uploads.github.com/repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}'
     * from origin 'http://localhost:3000' has been blocked by CORS policy: Response to preflight request doesn't
     * pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.
     */
    async uploadAllScreenshots(issueInfo: IssueInfo) {
        const release = (await this.obtainReleaseInfo()) ?? (await this.createRelease());

        issueInfo.screenshots.map(async (screenshot) => {
            const screenshotBlob = await fetch(screenshot.dataUrl).then((res) => res.blob());
            const success = await this.uploadScreenshot(release.id, screenshotBlob);
            console.log('Screenshot uploaded succesfully: ', success);
        });
    }

    async uploadScreenshot(releaseId: number, blob: Blob) {
        const url = `https://uploads.github.com/repos/${this.props.owner}/${this.props.repository}/releases/${releaseId}/assets?name=screenshot.png`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                Accept: 'application/vnd.github+json',
                Authorization: `Bearer ${this.props.authToken}`,
                'Content-Type': 'application/octet-stream'
            },
            body: blob
        });
        return response.ok;
    }
}

export default GithubController;
